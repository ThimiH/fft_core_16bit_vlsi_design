#!/bin/bash

# === Config ===
OUTDIR=sim/vcs/output
FSDB_FILE=waveform.fsdb
EXE=fft_simv
TOPLEVEL=fft_top_tb      # Adjust if your testbench module name differs
VDB=simv.vdb             # Coverage DB generated by VCS

# === Setup ===
mkdir -p $OUTDIR
cd $OUTDIR || exit 1

echo ">> Starting compilation..."

# === Compile with Coverage and FSDB ===
vcs -full64 -sverilog \
    -debug_acc+all -debug_region+cell+encrypt \
    -cm line+cond+tgl+fsm+branch \
    -f ../../compile.f \
    -P $VERDI_HOME/share/PLI/VCS/LINUX64/novas.tab \
       $VERDI_HOME/share/PLI/VCS/LINUX64/pli.a \
    -o $EXE \
    +define+RTL_SIM \
    +vcs+lic+wait \
    -l compile.log || { echo "Compilation failed"; exit 1; }

echo ">> Compilation completed."

# === Create FSDB Dump Control File ===
cat <<EOT > dump_control.vh
\$fsdbDumpfile("$FSDB_FILE");
\$fsdbDumpvars(0, $TOPLEVEL);
EOT

# === Simulate with Performance Logging ===
echo ">> Running simulation..."
/usr/bin/time -v ./$EXE +define+DUMP_FSDB -ucli -l simulate.log -cm line+cond+tgl+fsm+branch > perf_report.txt 2>&1

echo ">> Simulation completed."

# === Generate Coverage Report ===
echo ">> Generating coverage report..."
urg -dir $VDB -format both || echo "URG failed (check coverage settings)"

# === Open Verdi GUI (optional) ===
echo ">> Launching Verdi with waveform..."
verdi -ssf $FSDB_FILE &

echo ">> All tasks done. Reports and logs saved in $OUTDIR"
